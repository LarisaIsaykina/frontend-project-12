// import axios from 'axios';
// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// import routes from '../contexts/routes.js';

// const getAuthHeader = () => {
//   const userId = JSON.parse(localStorage.getItem('userId'));

//   console.log('userId', userId);

//   if (userId) {
//     return { Authorization: `Bearer ${userId.token}` };
//   }

//   return {};
// };

// export const fetchChannels = createAsyncThunk(
//   'channels/fetch',
//   async () => {
//     const response = await axios.get(routes.dataPath(),  { headers: getAuthHeader() } );
//     console.log('response', response);
//     return response.data.channels;
//   },
// );

// // export const createChannel = createAsyncThunk(
// //   'channels/create',
// //   async (task) => {
// //     const { data } = await axios.post(routes.tasksPath(), task);
// //     return data;
// //   },
// // );

// // export const removeChannel= createAsyncThunk(
// //   'channels/remove',
// //   async (id) => {
// //     await axios.delete(routes.removeTaskPath(id));
// //     return id;
// //   },
// // );

// const initialState = {
//     ids: [],
//     entities: {},
//   };
  

// const usersSlice = createSlice({
//   name: 'messages',
//   initialState,
//   extraReducers: (builder) => {
//     builder
//       .addCase(fetchChannels.fulfilled, (state, action) => {
//         state.messages = action.payload;
//       })
//     //   .addCase(sendTask.fulfilled, (state, action) => {
//     //     state.tasks.unshift(action.payload);
//     //   })
//     //   .addCase(removeTask.fulfilled, (state, action) => {
//     //     const id = action.payload;
//     //     state.tasks = state.tasks.filter((t) => t.id !== id);
//     //   });
//   },
// });

// const usersSlice = createSlice({
//     name: 'users',
//     initialState,
//     reducers: {
//       setUsers(state, { payload }) {
//         // BEGIN (write your solution here)
//         const { ids, entities } = payload;
//         state.ids = ids;
//         state.entities = entities;
  
//         // END
//       },
//     },
//   });
// export default usersSlice.reducer;
